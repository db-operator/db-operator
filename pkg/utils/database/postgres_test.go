/*
 * Copyright 2021 kloeckner.i GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package database

import (
	"context"
	"testing"

	"github.com/db-operator/db-operator/pkg/test"
	"github.com/stretchr/testify/assert"
)

func testPostgres() (*Postgres, *DatabaseUser) {
	dbuser := &DatabaseUser{
		Username:   "testuser",
		Password:   "testpassword",
		AccessType: ACCESS_TYPE_MAINUSER,
		// Without this grant "Azure" test won't pass
		// Since the default user is admin anyway, this grant
		// doesn't change anything
		GrantToAdmin: true,
	}

	return &Postgres{
			Backend:          "local",
			Host:             test.GetPostgresHost(),
			Port:             test.GetPostgresPort(),
			Database:         "testdb",
			Monitoring:       false,
			Extensions:       []string{},
			SSLEnabled:       false,
			SkipCAVerify:     false,
			DropPublicSchema: false,
			Schemas:          []string{},
			MainUser:         dbuser,
		},
		dbuser
}

func getPostgresAdmin() *DatabaseUser {
	return &DatabaseUser{
		Username: "postgres",
		Password: test.GetPostgresAdminPassword(),
	}
}

func TestPostgresExecuteQuery(t *testing.T) {
	testquery := "SELECT 1;"
	p, _ := testPostgres()
	admin := getPostgresAdmin()

	assert.NoError(t, p.executeExec(context.TODO(), "postgres", testquery, admin))
}

func TestPostgresCreateDatabase(t *testing.T) {
	admin := getPostgresAdmin()
	p, _ := testPostgres()

	err := p.createDatabase(context.TODO(), admin)
	assert.NoErrorf(t, err, "Unexpected error %v", err)

	err = p.createDatabase(context.TODO(), admin)
	assert.NoErrorf(t, err, "Unexpected error %v", err)
}

func TestPostgresCreateDatabaseTemplate(t *testing.T) {
	admin := getPostgresAdmin()
	p, _ := testPostgres()

	err := p.createDatabase(context.TODO(), admin)
	assert.NoErrorf(t, err, "Unexpected error %v", err)

	// Create a table to test template later
	testquery := `CREATE TABLE test (
  role_id serial PRIMARY KEY,
  role_name VARCHAR (255) UNIQUE NOT NULL
);`
	assert.NoError(t, p.executeExec(context.TODO(), "postgres", testquery, admin))

	p.Template = p.Database
	p.Database = "newdatabase"
	err = p.createDatabase(context.TODO(), admin)
	assert.NoErrorf(t, err, "Unexpected error %v", err)

	testquery = "SELECT role_id, role_name FROM test;"
	assert.NoError(t, p.executeExec(context.TODO(), "postgres", testquery, admin))

	testquery = "SELECT role_id, role_name, role_unknown FROM test;"
	assert.Error(t, p.executeExec(context.TODO(), "postgres", testquery, admin))
}

func TestPostgresCreateUser(t *testing.T) {
	admin := getPostgresAdmin()
	p, dbu := testPostgres()

	err := p.createOrUpdateUser(context.TODO(), admin, dbu)
	assert.NoErrorf(t, err, "Unexpected error %v", err)

	err = p.createOrUpdateUser(context.TODO(), admin, dbu)
	assert.NoErrorf(t, err, "Unexpected error %v", err)

	dbu.Username = "testuser\""

	err = p.createOrUpdateUser(context.TODO(), admin, dbu)
	assert.Error(t, err, "Should get error")
}

func TestPostgresQueryAsUser(t *testing.T) {
	p, dbu := testPostgres()

	if err := p.execAsUser(context.TODO(), "CREATE TABLE test (id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, name text)", dbu); err != nil {
		t.Error(err)
	}
	if err := p.execAsUser(context.TODO(), "INSERT INTO test VALUES (1, 'test')", dbu); err != nil {
		t.Error(err)
	}
	res, err := p.QueryAsUser(context.TODO(), "SELECT name FROM test", dbu)
	assert.NoErrorf(t, err, "Unexpected error %v", err)
	assert.Equal(t, "test", res)

	_, err = p.QueryAsUser(context.TODO(), "SELECT * FROM test", dbu)
	assert.Error(t, err)

	if err = p.execAsUser(context.TODO(), "DROP TABLE test", dbu); err != nil {
		t.Error(err)
	}
}

func TestPostgresMainUserLifecycle(t *testing.T) {
	// Test if it's created
	admin := getPostgresAdmin()
	p, dbu := testPostgres()
	p.Database = "maintest"
	p.Schemas = []string{"permtest"}

	assert.NoError(t, p.createDatabase(context.TODO(), admin))
	assert.NoError(t, p.createSchemas(context.TODO(), admin))
	assert.NoError(t, p.setUserPermission(context.TODO(), admin, dbu))

	createTable := `CREATE TABLE permtest.test_1 (
		role_id serial PRIMARY KEY,
		role_name VARCHAR (255) UNIQUE NOT NULL
	  );`
	assert.NoError(t, p.execAsUser(context.TODO(), createTable, dbu))

	createTable = `CREATE TABLE public.test_1 (
		role_id serial PRIMARY KEY,
		role_name VARCHAR (255) UNIQUE NOT NULL
	  );`
	assert.NoError(t, p.execAsUser(context.TODO(), createTable, dbu))

	insert := "INSERT INTO permtest.test_1 VALUES (1, 'test-1')"
	assert.NoError(t, p.execAsUser(context.TODO(), insert, dbu))
	insert = "INSERT INTO public.test_1 VALUES (1, 'test-1')"
	assert.NoError(t, p.execAsUser(context.TODO(), insert, dbu))

	selectQuery := "SELECT * FROM permtest.test_1"
	assert.NoError(t, p.execAsUser(context.TODO(), selectQuery, dbu))
	selectQuery = "SELECT * FROM public.test_1"
	assert.NoError(t, p.execAsUser(context.TODO(), selectQuery, dbu))

	insert = "INSERT INTO permtest.test_1 VALUES (2, 'test-2')"
	assert.NoError(t, p.execAsUser(context.TODO(), insert, dbu))
	insert = "INSERT INTO public.test_1 VALUES (2, 'test-2')"
	assert.NoError(t, p.execAsUser(context.TODO(), insert, dbu))

	update := "UPDATE permtest.test_1 SET role_name = 'test-1-new' WHERE role_id = 1"
	assert.NoError(t, p.execAsUser(context.TODO(), update, dbu))
	update = "UPDATE public.test_1 SET role_name = 'test-1-new' WHERE role_id = 1"
	assert.NoError(t, p.execAsUser(context.TODO(), update, dbu))

	delete := "DELETE FROM permtest.test_1 WHERE role_id = 1"
	assert.NoError(t, p.execAsUser(context.TODO(), delete, dbu))
	delete = "DELETE FROM public.test_1 WHERE role_id = 1"
	assert.NoError(t, p.execAsUser(context.TODO(), delete, dbu))

	drop := "DROP TABLE permtest.test_1"
	assert.NoError(t, p.execAsUser(context.TODO(), drop, dbu))
	drop = "DROP TABLE public.test_1"
	assert.NoError(t, p.execAsUser(context.TODO(), drop, dbu))
}

func TestPostgresReadOnlyUserLifecycleNoAdminGrant(t *testing.T) {
	// Test if it's created
	admin := getPostgresAdmin()
	p, dbu := testPostgres()
	dbu.GrantToAdmin = false
	p.Database = "readonlytest"
	p.Schemas = []string{"permtest"}
	assert.NoError(t, p.createDatabase(context.TODO(), admin))
	assert.NoError(t, p.createSchemas(context.TODO(), admin))
	assert.NoError(t, p.setUserPermission(context.TODO(), admin, dbu))
	readonlyUser := &DatabaseUser{
		Username:     "readonly",
		Password:     "123123",
		AccessType:   ACCESS_TYPE_READONLY,
		GrantToAdmin: true,
	}

	createTable := `CREATE TABLE permtest.test_1 (
		role_id serial PRIMARY KEY,
		role_name VARCHAR (255) UNIQUE NOT NULL
	  );`
	assert.NoError(t, p.execAsUser(context.TODO(), createTable, dbu))

	err := p.createUser(context.TODO(), admin, readonlyUser)
	assert.NoErrorf(t, err, "Unexpected error %v", err)

	// Test that it can't be created again
	err = p.createUser(context.TODO(), admin, readonlyUser)
	assert.Error(t, err, "Was expecting an error")

	// Test that it can be updated
	err = p.updateUser(context.TODO(), admin, readonlyUser)
	assert.NoErrorf(t, err, "Unexpected error %v", err)

	// Test that it has only readonly access to current objects
	createTable = `CREATE TABLE permtest.test_2 (
		role_id serial PRIMARY KEY,
		role_name VARCHAR (255) UNIQUE NOT NULL
	  );`
	assert.Error(t, p.execAsUser(context.TODO(), createTable, readonlyUser))
	assert.NoError(t, p.execAsUser(context.TODO(), createTable, dbu))

	insert := "INSERT INTO permtest.test_1 VALUES (1, 'test-1')"
	assert.NoError(t, p.execAsUser(context.TODO(), insert, dbu))
	insert = "INSERT INTO permtest.test_2 VALUES (1, 'test-1')"
	assert.NoError(t, p.execAsUser(context.TODO(), insert, dbu))

	selectQuery := "SELECT * FROM permtest.test_1"
	assert.NoError(t, p.execAsUser(context.TODO(), selectQuery, readonlyUser))
	selectQuery = "SELECT * FROM permtest.test_2"
	assert.NoError(t, p.execAsUser(context.TODO(), selectQuery, readonlyUser))

	insert = "INSERT INTO permtest.test_1 VALUES (2, 'test-2')"
	assert.Error(t, p.execAsUser(context.TODO(), insert, readonlyUser))
	insert = "INSERT INTO permtest.test_2 VALUES (2, 'test-2')"
	assert.Error(t, p.execAsUser(context.TODO(), insert, readonlyUser))

	update := "UPDATE permtest.test_1 SET role_name = 'test-1-new' WHERE role_id = 1"
	assert.Error(t, p.execAsUser(context.TODO(), update, readonlyUser))
	update = "UPDATE permtest.test_2 SET role_name = 'test-1-new' WHERE role_id = 1"
	assert.Error(t, p.execAsUser(context.TODO(), update, readonlyUser))

	delete := "DELETE FROM permtest.test_1 WHERE role_id = 1"
	assert.Error(t, p.execAsUser(context.TODO(), delete, readonlyUser))
	delete = "DELETE FROM permtest.test_2 WHERE role_id = 1"
	assert.Error(t, p.execAsUser(context.TODO(), delete, readonlyUser))

	drop := "DROP TABLE permtest.test_1"
	assert.Error(t, p.execAsUser(context.TODO(), drop, readonlyUser))
	assert.NoError(t, p.execAsUser(context.TODO(), drop, dbu))
	drop = "DROP TABLE permtest.test_2"
	assert.Error(t, p.execAsUser(context.TODO(), drop, readonlyUser))
	assert.NoError(t, p.execAsUser(context.TODO(), drop, dbu))

	// Test that it can be removed
	err = p.deleteUser(context.TODO(), admin, readonlyUser)
	assert.NoErrorf(t, err, "Unexpected error %v", err)
}

func TestPostgresReadWriteUserLifecycleNoAdminGrant(t *testing.T) {
	// Test if it's created
	admin := getPostgresAdmin()
	p, dbu := testPostgres()
	dbu.GrantToAdmin = false
	p.Database = "readwritetest"
	p.Schemas = []string{"permtest"}
	assert.NoError(t, p.createDatabase(context.TODO(), admin))
	assert.NoError(t, p.createSchemas(context.TODO(), admin))
	assert.NoError(t, p.setUserPermission(context.TODO(), admin, dbu))
	readwriteUser := &DatabaseUser{
		Username:     "readwrite",
		Password:     "123123",
		AccessType:   ACCESS_TYPE_READWRITE,
		GrantToAdmin: true,
	}

	createTable := `CREATE TABLE permtest.test_1 (
		role_id serial PRIMARY KEY,
		role_name VARCHAR (255) UNIQUE NOT NULL
	  );`
	assert.NoError(t, p.execAsUser(context.TODO(), createTable, dbu))

	err := p.createUser(context.TODO(), admin, readwriteUser)
	assert.NoErrorf(t, err, "Unexpected error %v", err)

	// Test that it can't be created again
	err = p.createUser(context.TODO(), admin, readwriteUser)
	assert.Error(t, err, "Was expecting an error")

	// Test that it can be updated
	err = p.updateUser(context.TODO(), admin, readwriteUser)
	assert.NoErrorf(t, err, "Unexpected error %v", err)

	// Test that it has only readonly access to current objects
	createTable = `CREATE TABLE permtest.test_2 (
		role_id serial PRIMARY KEY,
		role_name VARCHAR (255) UNIQUE NOT NULL
	  );`
	assert.Error(t, p.execAsUser(context.TODO(), createTable, readwriteUser))
	assert.NoError(t, p.execAsUser(context.TODO(), createTable, dbu))

	insert := "INSERT INTO permtest.test_1 VALUES (1, 'test-1')"
	assert.NoError(t, p.execAsUser(context.TODO(), insert, dbu))
	insert = "INSERT INTO permtest.test_2 VALUES (1, 'test-1')"
	assert.NoError(t, p.execAsUser(context.TODO(), insert, dbu))
	insert = "INSERT INTO permtest.test_1 VALUES (2, 'test-2')"
	assert.NoError(t, p.execAsUser(context.TODO(), insert, dbu))
	insert = "INSERT INTO permtest.test_2 VALUES (2, 'test-2')"
	assert.NoError(t, p.execAsUser(context.TODO(), insert, dbu))

	selectQuery := "SELECT * FROM permtest.test_1"
	assert.NoError(t, p.execAsUser(context.TODO(), selectQuery, readwriteUser))
	selectQuery = "SELECT * FROM permtest.test_2"
	assert.NoError(t, p.execAsUser(context.TODO(), selectQuery, readwriteUser))

	insert = "INSERT INTO permtest.test_1 VALUES (3, 'test-3')"
	assert.NoError(t, p.execAsUser(context.TODO(), insert, readwriteUser))
	insert = "INSERT INTO permtest.test_2 VALUES (3, 'test-3')"
	assert.NoError(t, p.execAsUser(context.TODO(), insert, readwriteUser))

	update := "UPDATE permtest.test_1 SET role_name = 'test-1-new' WHERE role_id = 1"
	assert.NoError(t, p.execAsUser(context.TODO(), update, readwriteUser))
	update = "UPDATE permtest.test_2 SET role_name = 'test-1-new' WHERE role_id = 1"
	assert.NoError(t, p.execAsUser(context.TODO(), update, readwriteUser))

	delete := "DELETE FROM permtest.test_1 WHERE role_id = 2"
	assert.NoError(t, p.execAsUser(context.TODO(), delete, readwriteUser))
	delete = "DELETE FROM permtest.test_2 WHERE role_id = 2"
	assert.NoError(t, p.execAsUser(context.TODO(), delete, readwriteUser))

	drop := "DROP TABLE permtest.test_1"
	assert.Error(t, p.execAsUser(context.TODO(), drop, readwriteUser))
	assert.NoError(t, p.execAsUser(context.TODO(), drop, dbu))
	drop = "DROP TABLE permtest.test_2"
	assert.Error(t, p.execAsUser(context.TODO(), drop, readwriteUser))
	assert.NoError(t, p.execAsUser(context.TODO(), drop, dbu))

	// Test that it can be removed
	err = p.deleteUser(context.TODO(), admin, readwriteUser)
	assert.NoErrorf(t, err, "Unexpected error %v", err)
}

func TestPostgresReadOnlyUserLifecycleAdminGrant(t *testing.T) {
	// Test if it's created
	admin := getPostgresAdmin()
	p, dbu := testPostgres()
	dbu.GrantToAdmin = true
	p.Database = "readonlytest"
	p.Schemas = []string{"permtest"}
	assert.NoError(t, p.createDatabase(context.TODO(), admin))
	assert.NoError(t, p.createSchemas(context.TODO(), admin))
	assert.NoError(t, p.setUserPermission(context.TODO(), admin, dbu))
	readonlyUser := &DatabaseUser{
		Username:     "readonly",
		Password:     "123123",
		AccessType:   ACCESS_TYPE_READONLY,
		GrantToAdmin: true,
	}

	createTable := `CREATE TABLE permtest.test_1 (
		role_id serial PRIMARY KEY,
		role_name VARCHAR (255) UNIQUE NOT NULL
	  );`
	assert.NoError(t, p.execAsUser(context.TODO(), createTable, dbu))

	err := p.createUser(context.TODO(), admin, readonlyUser)
	assert.NoErrorf(t, err, "Unexpected error %v", err)

	// Test that it can't be created again
	err = p.createUser(context.TODO(), admin, readonlyUser)
	assert.Error(t, err, "Was expecting an error")

	// Test that it can be updated
	err = p.updateUser(context.TODO(), admin, readonlyUser)
	assert.NoErrorf(t, err, "Unexpected error %v", err)

	// Test that it has only readonly access to current objects
	createTable = `CREATE TABLE permtest.test_2 (
		role_id serial PRIMARY KEY,
		role_name VARCHAR (255) UNIQUE NOT NULL
	  );`
	assert.Error(t, p.execAsUser(context.TODO(), createTable, readonlyUser))
	assert.NoError(t, p.execAsUser(context.TODO(), createTable, dbu))

	insert := "INSERT INTO permtest.test_1 VALUES (1, 'test-1')"
	assert.NoError(t, p.execAsUser(context.TODO(), insert, dbu))
	insert = "INSERT INTO permtest.test_2 VALUES (1, 'test-1')"
	assert.NoError(t, p.execAsUser(context.TODO(), insert, dbu))

	selectQuery := "SELECT * FROM permtest.test_1"
	assert.NoError(t, p.execAsUser(context.TODO(), selectQuery, readonlyUser))
	selectQuery = "SELECT * FROM permtest.test_2"
	assert.NoError(t, p.execAsUser(context.TODO(), selectQuery, readonlyUser))

	insert = "INSERT INTO permtest.test_1 VALUES (2, 'test-2')"
	assert.Error(t, p.execAsUser(context.TODO(), insert, readonlyUser))
	insert = "INSERT INTO permtest.test_2 VALUES (2, 'test-2')"
	assert.Error(t, p.execAsUser(context.TODO(), insert, readonlyUser))

	update := "UPDATE permtest.test_1 SET role_name = 'test-1-new' WHERE role_id = 1"
	assert.Error(t, p.execAsUser(context.TODO(), update, readonlyUser))
	update = "UPDATE permtest.test_2 SET role_name = 'test-1-new' WHERE role_id = 1"
	assert.Error(t, p.execAsUser(context.TODO(), update, readonlyUser))

	delete := "DELETE FROM permtest.test_1 WHERE role_id = 1"
	assert.Error(t, p.execAsUser(context.TODO(), delete, readonlyUser))
	delete = "DELETE FROM permtest.test_2 WHERE role_id = 1"
	assert.Error(t, p.execAsUser(context.TODO(), delete, readonlyUser))

	drop := "DROP TABLE permtest.test_1"
	assert.Error(t, p.execAsUser(context.TODO(), drop, readonlyUser))
	assert.NoError(t, p.execAsUser(context.TODO(), drop, dbu))
	drop = "DROP TABLE permtest.test_2"
	assert.Error(t, p.execAsUser(context.TODO(), drop, readonlyUser))
	assert.NoError(t, p.execAsUser(context.TODO(), drop, dbu))

	// Test that it can be removed
	err = p.deleteUser(context.TODO(), admin, readonlyUser)
	assert.NoErrorf(t, err, "Unexpected error %v", err)
}

func TestPostgresReadWriteUserLifecycleAdminGrant(t *testing.T) {
	// Test if it's created
	admin := getPostgresAdmin()
	p, dbu := testPostgres()
	dbu.GrantToAdmin = true
	p.Database = "readwritetest"
	p.Schemas = []string{"permtest"}
	assert.NoError(t, p.createDatabase(context.TODO(), admin))
	assert.NoError(t, p.createSchemas(context.TODO(), admin))
	assert.NoError(t, p.setUserPermission(context.TODO(), admin, dbu))
	readwriteUser := &DatabaseUser{
		Username:     "readwrite",
		Password:     "123123",
		AccessType:   ACCESS_TYPE_READWRITE,
		GrantToAdmin: true,
	}

	createTable := `CREATE TABLE permtest.test_1 (
		role_id serial PRIMARY KEY,
		role_name VARCHAR (255) UNIQUE NOT NULL
	  );`
	assert.NoError(t, p.execAsUser(context.TODO(), createTable, dbu))

	err := p.createUser(context.TODO(), admin, readwriteUser)
	assert.NoErrorf(t, err, "Unexpected error %v", err)

	// Test that it can't be created again
	err = p.createUser(context.TODO(), admin, readwriteUser)
	assert.Error(t, err, "Was expecting an error")

	// Test that it can be updated
	err = p.updateUser(context.TODO(), admin, readwriteUser)
	assert.NoErrorf(t, err, "Unexpected error %v", err)

	// Test that it has only readonly access to current objects
	createTable = `CREATE TABLE permtest.test_2 (
		role_id serial PRIMARY KEY,
		role_name VARCHAR (255) UNIQUE NOT NULL
	  );`
	assert.Error(t, p.execAsUser(context.TODO(), createTable, readwriteUser))
	assert.NoError(t, p.execAsUser(context.TODO(), createTable, dbu))

	insert := "INSERT INTO permtest.test_1 VALUES (1, 'test-1')"
	assert.NoError(t, p.execAsUser(context.TODO(), insert, dbu))
	insert = "INSERT INTO permtest.test_2 VALUES (1, 'test-1')"
	assert.NoError(t, p.execAsUser(context.TODO(), insert, dbu))
	insert = "INSERT INTO permtest.test_1 VALUES (2, 'test-2')"
	assert.NoError(t, p.execAsUser(context.TODO(), insert, dbu))
	insert = "INSERT INTO permtest.test_2 VALUES (2, 'test-2')"
	assert.NoError(t, p.execAsUser(context.TODO(), insert, dbu))

	selectQuery := "SELECT * FROM permtest.test_1"
	assert.NoError(t, p.execAsUser(context.TODO(), selectQuery, readwriteUser))
	selectQuery = "SELECT * FROM permtest.test_2"
	assert.NoError(t, p.execAsUser(context.TODO(), selectQuery, readwriteUser))

	insert = "INSERT INTO permtest.test_1 VALUES (3, 'test-3')"
	assert.NoError(t, p.execAsUser(context.TODO(), insert, readwriteUser))
	insert = "INSERT INTO permtest.test_2 VALUES (3, 'test-3')"
	assert.NoError(t, p.execAsUser(context.TODO(), insert, readwriteUser))

	update := "UPDATE permtest.test_1 SET role_name = 'test-1-new' WHERE role_id = 1"
	assert.NoError(t, p.execAsUser(context.TODO(), update, readwriteUser))
	update = "UPDATE permtest.test_2 SET role_name = 'test-1-new' WHERE role_id = 1"
	assert.NoError(t, p.execAsUser(context.TODO(), update, readwriteUser))

	delete := "DELETE FROM permtest.test_1 WHERE role_id = 2"
	assert.NoError(t, p.execAsUser(context.TODO(), delete, readwriteUser))
	delete = "DELETE FROM permtest.test_2 WHERE role_id = 2"
	assert.NoError(t, p.execAsUser(context.TODO(), delete, readwriteUser))

	drop := "DROP TABLE permtest.test_1"
	assert.Error(t, p.execAsUser(context.TODO(), drop, readwriteUser))
	assert.NoError(t, p.execAsUser(context.TODO(), drop, dbu))
	drop = "DROP TABLE permtest.test_2"
	assert.Error(t, p.execAsUser(context.TODO(), drop, readwriteUser))
	assert.NoError(t, p.execAsUser(context.TODO(), drop, dbu))

	// Test that it can be removed
	err = p.deleteUser(context.TODO(), admin, readwriteUser)
	assert.NoErrorf(t, err, "Unexpected error %v", err)
}


func TestPublicSchema(t *testing.T) {
	p, dbu := testPostgres()
	p.DropPublicSchema = false
	assert.NoError(t, p.checkSchemas(context.TODO(), dbu))
}

func TestDropPublicSchemaFail(t *testing.T) {
	p, dbu := testPostgres()
	p.DropPublicSchema = true
	assert.Error(t, p.checkSchemas(context.TODO(), dbu))
}

func TestDropPublicSchemaMonitoringTrue(t *testing.T) {
	p, dbu := testPostgres()
	admin := getPostgresAdmin()
	p.Monitoring = true
	p.DropPublicSchema = true
	p.dropPublicSchema(context.TODO(), admin)
	assert.Error(t, p.checkSchemas(context.TODO(), dbu))
}

func TestDropPublicSchemaMonitoringFalse(t *testing.T) {
	p, dbu := testPostgres()
	admin := getPostgresAdmin()
	p.Monitoring = false
	p.DropPublicSchema = true
	p.dropPublicSchema(context.TODO(), admin)
	assert.NoError(t, p.checkSchemas(context.TODO(), dbu))

	// Schemas is recreated here not to breaks tests
	p.Schemas = []string{"public"}
	assert.NoError(t, p.createSchemas(context.TODO(), admin))
}

func TestEnableMonitoring(t *testing.T) {
	p, dbu := testPostgres()
	admin := getPostgresAdmin()
	p.Monitoring = true
	p.enableMonitoring(context.TODO(), admin)
	p.Extensions = []string{"pg_stat_statements"}
	assert.NoError(t, p.checkExtensions(context.TODO(), dbu))
}

func TestPostgresNoExtensions(t *testing.T) {
	admin := getPostgresAdmin()
	p, dbu := testPostgres()
	p.Extensions = []string{}

	assert.NoError(t, p.addExtensions(context.TODO(), admin))
	assert.NoError(t, p.checkExtensions(context.TODO(), dbu))
}

func TestPostgresAddExtensions(t *testing.T) {
	admin := getPostgresAdmin()
	p, dbu := testPostgres()
	p.Extensions = []string{"pgcrypto", "uuid-ossp"}

	assert.Error(t, p.checkExtensions(context.TODO(), dbu))
	assert.NoError(t, p.addExtensions(context.TODO(), admin))
	assert.NoError(t, p.checkExtensions(context.TODO(), dbu))
}

func TestPostgresNoSchemas(t *testing.T) {
	admin := getPostgresAdmin()
	p, dbu := testPostgres()

	assert.NoError(t, p.checkSchemas(context.TODO(), dbu))
	assert.NoError(t, p.createSchemas(context.TODO(), admin))
	assert.NoError(t, p.checkSchemas(context.TODO(), dbu))
}

func TestPostgresSchemas(t *testing.T) {
	admin := getPostgresAdmin()
	p, dbu := testPostgres()
	p.Schemas = []string{"schema_1", "schema_2", "schema-3"}

	assert.Error(t, p.checkSchemas(context.TODO(), dbu))
	assert.NoError(t, p.createSchemas(context.TODO(), admin))
	assert.NoError(t, p.checkSchemas(context.TODO(), dbu))
}

func TestPostgresDeleteUser(t *testing.T) {
	admin := getPostgresAdmin()
	p, dbu := testPostgres()

	err := p.deleteUser(context.TODO(), admin, dbu)
	assert.NoErrorf(t, err, "Unexpected error %v", err)
}

func TestPostgresDeleteDatabase(t *testing.T) {
	admin := getPostgresAdmin()
	p, _ := testPostgres()

	err := p.deleteDatabase(context.TODO(), admin)
	assert.NoErrorf(t, err, "Unexpected error %v", err)

	err = p.deleteDatabase(context.TODO(), admin)
	assert.NoErrorf(t, err, "Unexpected error %v", err)
}

func TestPostgresGetCredentials(t *testing.T) {
	p, dbu := testPostgres()

	cred := p.GetCredentials(context.TODO(), dbu)
	assert.Equal(t, cred.Username, dbu.Username)
	assert.Equal(t, cred.Name, p.Database)
	assert.Equal(t, cred.Password, dbu.Password)
}

func TestPostgresParseAdminCredentials(t *testing.T) {
	p, _ := testPostgres()

	invalidData := make(map[string][]byte)
	invalidData["unknownkey"] = []byte("wrong")

	_, err := p.ParseAdminCredentials(context.TODO(), invalidData)
	assert.Errorf(t, err, "should get error %v", err)

	validData1 := make(map[string][]byte)
	validData1["user"] = []byte("admin")
	validData1["password"] = []byte("admin")

	cred, err := p.ParseAdminCredentials(context.TODO(), validData1)
	assert.NoErrorf(t, err, "expected no error %v", err)
	assert.Equal(t, string(validData1["user"]), cred.Username, "expect same values")
	assert.Equal(t, string(validData1["password"]), cred.Password, "expect same values")

	validData2 := make(map[string][]byte)
	validData2["postgresql-password"] = []byte("passw0rd")
	cred, err = p.ParseAdminCredentials(context.TODO(), validData2)
	assert.NoErrorf(t, err, "expected no error %v", err)
	assert.Equal(t, "postgres", cred.Username, "expect same values")
	assert.Equal(t, string(validData2["postgresql-password"]), cred.Password, "expect same values")

	validData3 := make(map[string][]byte)
	validData3["postgresql-postgres-password"] = []byte("passw0rd")
	cred, err = p.ParseAdminCredentials(context.TODO(), validData3)
	assert.NoErrorf(t, err, "expected no error %v", err)
	assert.Equal(t, "postgres", cred.Username, "expect same values")
	assert.Equal(t, string(validData3["postgresql-postgres-password"]), cred.Password, "expect same values")
}
